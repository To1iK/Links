// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;
using System.Text.Json;
using Microsoft.EntityFrameworkCore;

namespace Links.Models
{
    public partial class Transaction_
    {
        [Key]
        [Column("id")]
        public int Id { get; set; }
        public int? StageId { get; set; }
       
        [Column("Data")]
        public string _Data = "{}";
         [NotMapped]
        public JsonElement Data
        {
            get
            {
                JsonDocument jd = JsonDocument.Parse(_Data);

                return JsonSerializer.Deserialize<JsonElement>(_Data);
            }
            set
            {
                _Data = JsonSerializer.Serialize(value);
            }
        }
        [Column("OuterData")]
        public string _OuterData = "{}";
     

        [NotMapped]
        public JsonElement OuterData
        {
            get
            {
                JsonDocument jd = JsonDocument.Parse(_OuterData);

                return JsonSerializer.Deserialize<JsonElement>(_OuterData);
            }
            set
            {
                _OuterData = JsonSerializer.Serialize(value);
            }
        }

        public int? Status { get; set; }
        public int? Executor { get; set; }
        public int? FunctionId { get; set; }
        public string FunctionLink { get; set; }

 
    }
}

//JsonSerializerOptions jso = new JsonSerializerOptions();
//jso.Encoder = System.Text.Encodings.Web.JavaScriptEncoder.UnsafeRelaxedJsonEscaping;

//modelBuilder.Entity<Transaction>(entity =>
//{
//    entity.Property(e => e.Id).HasColumnName("id");
//    entity.Property(e => e.Data)
//    .HasConversion(
//v => JsonSerializer.Serialize(v, jso),
//v => JsonSerializer.Deserialize<JsonDocument>(v, jso));
//    entity.Property(e => e.OuterData)
//.HasConversion(
//v => JsonSerializer.Serialize(v, jso),
//v => JsonSerializer.Deserialize<JsonDocument>(v, jso));

//});