// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations.Schema;
using Microsoft.EntityFrameworkCore;

namespace Links.Models;

public partial class LinksContext : DbContext
{
    public LinksContext()
    {
    }

    public LinksContext(DbContextOptions<LinksContext> options)
        : base(options)
    {
    }

    public virtual DbSet<Choice> Choices { get; set; }

    public virtual DbSet<Content> Contents { get; set; }

    public virtual DbSet<Detail> Details { get; set; }

    public virtual DbSet<File> Files { get; set; }

    public virtual DbSet<Group> Groups { get; set; }

    public virtual DbSet<History> Histories { get; set; }

    public virtual DbSet<Msg> Msgs { get; set; }

    public virtual DbSet<MsgforUser> MsgforUsers { get; set; }

    public virtual DbSet<Node> Nodes { get; set; }

    [NotMapped]
    public virtual DbSet<NodeAccess2> NodeAccesses2 { get; set; }
    public virtual DbSet<NodeAccess> NodeAccesses { get; set; }

    public virtual DbSet<NodeType> NodeTypes { get; set; }

    public virtual DbSet<ObjectDetail> ObjectDetails { get; set; }

    public virtual DbSet<Role> Roles { get; set; }

    public virtual DbSet<Stage> Stages { get; set; }

    public virtual DbSet<StageUserRole> StageUserRoles { get; set; }

    public virtual DbSet<Transaction> Transactions { get; set; }

    public virtual DbSet<User> Users { get; set; }

    public virtual DbSet<UserNode> UserNodes { get; set; }

    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
#warning To protect potentially sensitive information in your connection string, you should move it out of source code. You can avoid scaffolding the connection string by using the Name= syntax to read it from configuration - see https://go.microsoft.com/fwlink/?linkid=2131148. For more guidance on storing connection strings, see http://go.microsoft.com/fwlink/?LinkId=723263.
        => optionsBuilder.UseSqlServer("Server=DESKTOP-7F3BLL4;Database=Links;User ID=tolik;Password=Gfhjkmnjksrf1;TrustServerCertificate=True;Encrypt=False");

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<Choice>(entity =>
        {
            entity.HasKey(e => new { e.N, e.StartStageId, e.EndStageId }).HasName("PK_Choices_1");

            entity.HasOne(d => d.EndStage).WithMany(p => p.ChoiceEndStages)
                .HasForeignKey(d => d.EndStageId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Choices_Stages1");

            entity.HasOne(d => d.StartStage).WithMany(p => p.ChoiceStartStages)
                .HasForeignKey(d => d.StartStageId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Choices_Stages");
        });

        modelBuilder.Entity<Content>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_Posts");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Code).HasMaxLength(10);
            entity.Property(e => e.CreationTime).HasColumnType("datetime");
            entity.Property(e => e.DataSource).HasMaxLength(250);
            entity.Property(e => e.Description).HasMaxLength(250);
            entity.Property(e => e.Header).HasMaxLength(250);

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.Content)
                .HasForeignKey<Content>(d => d.Id)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Contents_Nodes");
        });

        modelBuilder.Entity<Detail>(entity =>
        {
            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Name).HasMaxLength(30);

            entity.HasOne(d => d.Node).WithMany(p => p.Details)
                .HasForeignKey(d => d.NodeId)
                .HasConstraintName("FK_Details_Nodes");

            entity.HasOne(d => d.Ttansaction).WithMany(p => p.Details)
                .HasForeignKey(d => d.TtansactionId)
                .HasConstraintName("FK_Details_Transactions");
        });

        modelBuilder.Entity<File>(entity =>
        {
            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.FileName).HasMaxLength(250);
            entity.Property(e => e.FileType).HasMaxLength(20);
            entity.Property(e => e.Source).HasMaxLength(250);

            entity.HasOne(d => d.Node).WithMany(p => p.Files)
                .HasForeignKey(d => d.NodeId)
                .HasConstraintName("FK_Files_Nodes");
        });

        modelBuilder.Entity<Group>(entity =>
        {
            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Name).HasMaxLength(50);
        });

        modelBuilder.Entity<History>(entity =>
        {
            entity.ToTable("History");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Dt)
                .HasColumnType("datetime")
                .HasColumnName("DT");

            entity.HasOne(d => d.Node).WithMany(p => p.Histories)
                .HasForeignKey(d => d.NodeId)
                .HasConstraintName("FK_History_Nodes");

            entity.HasOne(d => d.User).WithMany(p => p.Histories)
                .HasForeignKey(d => d.UserId)
                .HasConstraintName("FK_History_Users");
        });

        modelBuilder.Entity<Msg>(entity =>
        {
            entity.ToTable("MSGs");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Dt)
                .HasColumnType("datetime")
                .HasColumnName("DT");
            entity.Property(e => e.Text).HasMaxLength(255);

            entity.HasOne(d => d.AuthorNavigation).WithMany(p => p.Msgs)
                .HasForeignKey(d => d.Author)
                .HasConstraintName("FK_MSGs_Users");

            entity.HasOne(d => d.Node).WithMany(p => p.Msgs)
                .HasForeignKey(d => d.NodeId)
                .HasConstraintName("FK_MSGs_Nodes");

            entity.HasOne(d => d.Transaction).WithMany(p => p.Msgs)
                .HasForeignKey(d => d.TransactionId)
                .HasConstraintName("FK_MSGs_Transactions");
        });

        modelBuilder.Entity<MsgforUser>(entity =>
        {
            entity.HasKey(e => new { e.MsgId, e.UserId });

            entity.ToTable("MSGforUsers");

            entity.HasOne(d => d.Msg).WithMany(p => p.MsgforUsers)
                .HasForeignKey(d => d.MsgId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_MSGforUsers_MSGs");

            entity.HasOne(d => d.User).WithMany(p => p.MsgforUsers)
                .HasForeignKey(d => d.UserId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_MSGforUsers_Users");
        });

        modelBuilder.Entity<Node>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_Nodes_1");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Code)
                .IsRequired()
                .HasMaxLength(20);
            entity.Property(e => e.Description).HasMaxLength(2000);
            entity.Property(e => e.EditTime).HasColumnType("datetime");
            entity.Property(e => e.IsActive)
                .IsRequired()
                .HasDefaultValueSql("(CONVERT([bit],(0)))");
            entity.Property(e => e.NodeContent).HasMaxLength(1000);
            entity.Property(e => e.NodeName).HasMaxLength(250);

            entity.HasOne(d => d.NodeType).WithMany(p => p.Nodes)
                .HasForeignKey(d => d.NodeTypeId)
                .HasConstraintName("FK_Nodes_NodeTypes");

            entity.HasOne(d => d.ParentNode).WithMany(p => p.InverseParentNode)
                .HasForeignKey(d => d.ParentNodeId)
                .HasConstraintName("FK_Nodes_Nodes");
        });

        modelBuilder.Entity<NodeAccess>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_Node_Users");

            entity.ToTable("NodeAccess");

            entity.Property(e => e.Id).HasColumnName("id");
            
            entity.HasOne(d => d.Group).WithMany(p => p.NodeAccesses)
                .HasForeignKey(d => d.GroupId)
                .HasConstraintName("FK_NodeAccess_Groups");

            entity.HasOne(d => d.Node).WithMany(p => p.NodeAccesses)
                .HasForeignKey(d => d.NodeId)
                .HasConstraintName("FK_Node_Access_Nodes1");

            entity.HasOne(d => d.User).WithMany(p => p.NodeAccesses)
                .HasForeignKey(d => d.UserId)
                .HasConstraintName("FK_Node_Access_Users");
        });

        modelBuilder.Entity<NodeType>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_Types");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Code).HasMaxLength(20);
            entity.Property(e => e.Editor).HasMaxLength(100);
            entity.Property(e => e.TypeName).HasMaxLength(50);
            entity.Property(e => e.Viewer).HasMaxLength(100);
        });

        modelBuilder.Entity<ObjectDetail>(entity =>
        {
            entity.Property(e => e.Id).HasColumnName("id");

            entity.HasOne(d => d.Detail).WithMany(p => p.ObjectDetails)
                .HasForeignKey(d => d.DetailId)
                .HasConstraintName("FK_ObjectDetails_Details");
        });

        modelBuilder.Entity<Role>(entity =>
        {
            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Description).HasMaxLength(100);
            entity.Property(e => e.Name).HasMaxLength(50);
        });

        modelBuilder.Entity<Stage>(entity =>
        {
            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Name).HasMaxLength(50);

            entity.HasOne(d => d.Process).WithMany(p => p.Stages)
                .HasForeignKey(d => d.ProcessId)
                .HasConstraintName("FK_Stages_Contents");

            entity.HasOne(d => d.ProcessNavigation).WithMany(p => p.Stages)
                .HasForeignKey(d => d.ProcessId)
                .HasConstraintName("FK_Stages_Nodes");
        });

        modelBuilder.Entity<StageUserRole>(entity =>
        {
            entity.HasKey(e => new { e.UserId, e.RoleId, e.StageId });

            entity.HasOne(d => d.Form).WithMany(p => p.StageUserRoles)
                .HasForeignKey(d => d.FormId)
                .HasConstraintName("FK_StageUserRoles_Contents");

            entity.HasOne(d => d.Role).WithMany(p => p.StageUserRoles)
                .HasForeignKey(d => d.RoleId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_UserRoles_Roles");

            entity.HasOne(d => d.Stage).WithMany(p => p.StageUserRoles)
                .HasForeignKey(d => d.StageId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_StageUserRoles_Stages");

            entity.HasOne(d => d.User).WithMany(p => p.StageUserRoles)
                .HasForeignKey(d => d.UserId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_UserRoles_Users");
        });

        modelBuilder.Entity<Transaction>(entity =>
        {
            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.CloseDt)
                .HasColumnType("datetime")
                .HasColumnName("CloseDT");
            entity.Property(e => e.CreateDt)
                .HasColumnType("datetime")
                .HasColumnName("CreateDT");
            entity.Property(e => e.ExpiryDt)
                .HasColumnType("datetime")
                .HasColumnName("ExpiryDT");
            entity.Property(e => e.Name).HasMaxLength(200);

            entity.HasOne(d => d.Flow).WithMany(p => p.InverseFlow)
                .HasForeignKey(d => d.FlowId)
                .HasConstraintName("FK_Transactions_Transactions");

            entity.HasOne(d => d.Stage).WithMany(p => p.Transactions)
                .HasForeignKey(d => d.StageId)
                .HasConstraintName("FK_Transactions_Stages");

            entity.HasMany(d => d.EndTransactions).WithMany(p => p.StartTransactions)
                .UsingEntity<Dictionary<string, object>>(
                    "TrToTr",
                    r => r.HasOne<Transaction>().WithMany()
                        .HasForeignKey("EndTransactionId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_TrToTr_Transactions1"),
                    l => l.HasOne<Transaction>().WithMany()
                        .HasForeignKey("StartTransactionId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_TrToTr_Transactions"),
                    j =>
                    {
                        j.HasKey("StartTransactionId", "EndTransactionId");
                        j.ToTable("TrToTr");
                    });

            entity.HasMany(d => d.StartTransactions).WithMany(p => p.EndTransactions)
                .UsingEntity<Dictionary<string, object>>(
                    "TrToTr",
                    r => r.HasOne<Transaction>().WithMany()
                        .HasForeignKey("StartTransactionId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_TrToTr_Transactions"),
                    l => l.HasOne<Transaction>().WithMany()
                        .HasForeignKey("EndTransactionId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_TrToTr_Transactions1"),
                    j =>
                    {
                        j.HasKey("StartTransactionId", "EndTransactionId");
                        j.ToTable("TrToTr");
                    });
        });

        modelBuilder.Entity<User>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_User");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Active)
                .IsRequired()
                .HasDefaultValueSql("((1))");
            entity.Property(e => e.BirthDay).HasColumnType("date");
            entity.Property(e => e.FirstName).HasMaxLength(25);
            entity.Property(e => e.LastName).HasMaxLength(25);
            entity.Property(e => e.Login)
                .HasMaxLength(100)
                .HasColumnName("login");
            entity.Property(e => e.Name).HasMaxLength(255);
            entity.Property(e => e.PatronimicName).HasMaxLength(25);

            entity.HasMany(d => d.Groups).WithMany(p => p.Users)
                .UsingEntity<Dictionary<string, object>>(
                    "UserGroup",
                    r => r.HasOne<Group>().WithMany()
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_UserGroups_Groups"),
                    l => l.HasOne<User>().WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_UserGroups_Users"),
                    j =>
                    {
                        j.HasKey("UserId", "GroupId");
                        j.ToTable("UserGroups");
                    });
        });

        modelBuilder.Entity<UserNode>(entity =>
        {
            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");

            entity.HasOne(d => d.Node).WithMany(p => p.UserNodes)
                .HasForeignKey(d => d.NodeId)
                .HasConstraintName("FK_UserNodes_Nodes");

            entity.HasOne(d => d.User).WithMany(p => p.UserNodes)
                .HasForeignKey(d => d.UserId)
                .HasConstraintName("FK_UserNodes_Users");
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}