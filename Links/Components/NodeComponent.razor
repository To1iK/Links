@inject Links.Models.LinksContext LinksContext;

@if (node != null)
{


    <li id="@(node.Id.ToString())" class="@(node.isSelected ? "selected" : "")">

        <div @onclick="select" style="display:flex; justify-content:space-between; position: relative">
            @if (node.IsContainer)
            {
                <input hidden type="checkbox" id="@("i" + node.Id.ToString())" @bind="isExpanded" />
            }
            <label for="@("i" + node.Id.ToString())" style="display: flex; align-items:center">

                @if (node.IsContainer)
                {

                    if (node.isExpanded == true)
                    {
                        <svg class="icon"><use xlink:href="symbol-defs.svg#icon-chevron-down"></use></svg>
                    }
                    else
                    {
                        <svg class="icon"><use xlink:href="symbol-defs.svg#icon-chevron-right"></use></svg>
                    }

                    <span>@node.NodeName</span>

                }
                else
                {
                    @*<small class="@node.NodeType.Icon icon-info"></small>*@


                    <svg class="icon" viewBox="0 0 32 32">
                        @((MarkupString)node.NodeType.Icon)
                    </svg>


                    <NavLink class="nav-link" href="@GetHref" target="@GetTarget" style="display:inline; padding:0;">
                        <span>@node.NodeName</span><small> (@na.AccessLevel)</small>
                    </NavLink>

                }
            </label>
            @if (node.isSelected & na.AccessLevel >= 20)
            {
                <div class="drop-left-menu">

                    <div class="drop-content">
                        @if (na.AccessLevel >= 30 & node.IsContainer)
                        {
                            <svg @onclick="add_node" class="icon btn"><use xlink:href="symbol-defs.svg#icon-add-to-list"></use></svg>
                        }
                        <svg @onclick="edit" class="icon btn"><use xlink:href="symbol-defs.svg#icon-pen-angled"></use></svg>

                        <svg @onclick="remove_node" class="icon btn"><use xlink:href="symbol-defs.svg#icon-trash-can"></use></svg>


                    </div>
                    <svg class="icon btn drop-btn"><use xlink:href="symbol-defs.svg#icon-view-tile"></use></svg>


                </div>
            }

        </div>

        @if (node.isExpanded & nodes != null)
        {
            <ul class="ul-tree">
                @foreach (var n in nodes)
                {
                    <Links.Components.NodeComponent onEdit="edit2" onSelect="select2" na="n"></Links.Components.NodeComponent>
                }
            </ul>
        }


    </li>
}