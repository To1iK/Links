@using Links.Models;
@inherits LayoutComponentBase
@page "/Main/{MainNodeId:int}"
<PageTitle>Links</PageTitle>

<div class="page">


    @if (isSidebarVisible)
    {
        <div class="sidebar" id="left_panel" onmousedown="panelclick(event)">
            <div id="menu_header">

                <a href="" style="margin-left:33px">Links </a>
                <div>
                    <span>@LinksContext.curentUser?.Name</span>
                    @* <span>@curentNode?.NodeName</span>*@
                    <svg class="icon"><use xlink:href="symbol-defs.svg#icon-profile-male"></use></svg>

                </div>
            </div>

            <div class="menu_list">
                <Links.Components.NodeListComponent></Links.Components.NodeListComponent>
            </div>
        </div>
    }
    @*    <button @onclick="changeSidebarVis" style="display:block; position:fixed; width:32px;height:32px; z-index=2">
         @(isSidebarVisible ? "X" : "L")
        </button>*@

    @*<svg @onclick="changeSidebarVis" style="display:block; position:fixed; width:32px;height:32px; z-index=2" class="icon"><use xlink:href="symbol-defs.svg#icon-links"></use></svg>*@
   
    @*style="fill:none;fill-opacity:1;stroke-width:2.9488;stroke-linecap:round;stroke-dasharray:none;stroke-opacity:1"*@

    <input id="menu__toggle" type="checkbox" @onclick="changeSidebarVis" checked/>
    <label class="menu__btn" for="menu__toggle">
        <span></span>
    </label>

    <main>
        @Body
    </main>
</div>

@code{

    [Inject]
    public Links.Models.LinksContext LinksContext { get; set; }

    [Inject]
    AuthenticationStateProvider AuthenticationStateProvider { get; set; }

    [Parameter]
    public int mainNodeId { get; set; } = 0;

    bool isSidebarVisible = true;

    void changeSidebarVis()
    {
        isSidebarVisible = !isSidebarVisible;
    }

    async protected override void OnInitialized()
    {
        var authState = await AuthenticationStateProvider
               .GetAuthenticationStateAsync();

        var user = authState.User;

        if (user is null || String.IsNullOrEmpty(user.Identity?.Name))
        {
            Models.User _user = new Models.User();

            _user.Id = 0;
            _user.Login = "NoNameUser";
            _user.Name = "NoNameUser";
            _user.FirstName = "NoNameUser";
            LinksContext.curentUser = _user;
        }
        else
        {

            LinksContext.curentUser = LinksContext.Users.Where(u => u.Login == user.Identity.Name)
           .FirstOrDefault(); 

            if (LinksContext.curentUser == null)
            {

                Models.User _user = new Models.User();
                _user.Id = 0;
                _user.Login = user.Identity.Name;
                _user.Name = "notRegisterName";
                LinksContext.Users.Add(_user);

                _user.Groups.Add(LinksContext.Groups.Find(1));

                LinksContext.SaveChanges();
            }

        }

        var mn = LinksContext.Nodes.Find(mainNodeId);
        if (mn == null)
        {
            mn = new Node();
            mn.NodeName = "Кореневий вузол Links";
            mn.Id = 0;
        }
        else
        {
           
        }
        LinksContext.MainNode = mn;
  

    }
}