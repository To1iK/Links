@using Links.Models;
@using Microsoft.AspNetCore.Components.QuickGrid
@using Microsoft.EntityFrameworkCore;

@using System.Diagnostics;


@inject Links.Models.LinksContext LinksContext;
@page "/"

<PageTitle>Links</PageTitle>

<h1>Hello, world!</h1>

Welcome to your new app.



<SurveyPrompt Title="How is Blazor working for?" />

<button @onclick="v">search</button>

<InputText @bind-Value="noden"></InputText>


@if (ln != null )
{
   @if (ln.Count() > 0)
        {
@* @foreach (var c in ln)
{
     
             <h5>@c.getParentNames()</h5>
}*@

   <QuickGrid Items="@ln" >

            <PropertyColumn Property="@(p => p.ParentNames)" />
            <PropertyColumn Property="@(p => p.NodeName)" Sortable="true" />

            <TemplateColumn Title="Name" Sortable="true">
                <ChildContent>
                    <NavLink class="nav-link" href='@($"Viewer/{context.Id}")' target="" style="display:inline; padding:0;">
                        <span>@context.NodeName</span>
                    </NavLink>
                </ChildContent>
            </TemplateColumn>

        </QuickGrid>
        }
        else
{
            <h5>@ln.Count()</h5>
}    }

<br />
n - @n?.NodeName
<br />


@*<Links.Components.UsersCombobox DisplayedValue="n?.NodeName" OnSelected="v"></Links.Components.UsersCombobox>
*@

@code{
    string noden;
    string noden2;
    int id;
    IQueryable<Node> ln ;
    Dictionary<string,object> Code ;
    Node? n { set; get; }

    void v(object e)
    {
        ln = LinksContext.Contents
        .Where(x => EF.Functions
            .Contains(x.Data, noden, 1058) || EF.Functions
            .FreeText(x.Data, noden, 1058))
            .Include(x => x.IdNavigation)
            .ThenInclude(x=>x.ParentNode)
            .Select(x=>x.IdNavigation)
            .AsQueryable();

        //n = (Node)e;
        //Debug.WriteLine("ghjghjgjgjg");
        //Debug.WriteLine(n?.Id);
        StateHasChanged();
        //List<Option<Severity?>> SeverityOptionList = 
        //Enum.GetValues(typeof(Severity))
        //.Cast<Severity?>()
        //.Where(x => x != Severity.None)
        //.Select(x => new Option<Severity?> { Key = x.Value, Value = x.Value }).ToList();

       // List<Option<Node>> NodeList = LinksContext.Nodes.Select(x => new Option<Node>{ Value = x }).ToList();
    }
  
    private string GetHref(Node n)
    {
       
            if (n.NodeType.Code == "link")
            {
                return n.NodeContent;
            }
            else
            {
                return $"Viewer/{n.Id}";
            }
        
    }

    private string GetTarget(Node n)
    {
       
            if (n.NodeType.Code == "link")
            {
                return "_blank";
            }
            else
            {
                return "";
            }
        
    }

}